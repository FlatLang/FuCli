package flat/fucli

import flat/log

class {
  static Logger log = Logger(FuCli.class)

  visible CliArg[] usedArgs = CliArg[]

  CliArg binaryArg

  visible String binaryName => binaryArg.name
  visible CliArg[] args => binaryArg.args
  visible String description => binaryArg.description

  public construct(
    String binaryName,
    CliArg[] args,
    String: description = null
  ) {
    binaryArg = CliArg(
      binaryName,
      description: description,
      args: args
    )
  }

  public parse(List<String> strArgs) {
    let argsIterator = strArgs.iterator

    while (argsIterator.hasNext) {
      let value = argsIterator.stepNext

      log.debug("Searching for arg for value \"#{value}\"")
      if (let arg = getArg(value)) {
        log.debug("Got arg for value \"#{value}\": #{arg}")
        usedArgs.add(arg)
        arg.enabled = true

        while (argsIterator.hasNext) {
          if (arg.values.count < arg.minCount) { // if not reached minimum values for argument yet
            arg.values.add(argsIterator.stepNext)
          } else if (arg.maxCount == -1 || arg.values.count < arg.maxCount) { // if not reached maximum values for argument yet
            if (getArg(argsIterator.next)) break

            arg.values.add(argsIterator.stepNext)
          } else {
            break
          }
        }

        if (arg.values.count < arg.minCount) {
          throw InvalidCliArgumentException(value)
        }
      } else {
        throw InvalidCliArgumentException(value)
      }
    }
  }

  getArg(String value) -> CliArg => null {
    if (let childArg = usedArgs.lastNonNull({ _.getArg(value) })) {
      return childArg
    }
    if (let globalArg = args.firstWhere({ _.matches(value) })) {
      return globalArg
    }
  }

  class InvalidCliArgumentException extends Exception {
    public construct(String argument) => super("Invalid CLI argument: '#argument'")
  }

  public getHelp(
    Bool formatted = true
  ) -> CliArgHelp {
    let helpArgs = [binaryArg]
    helpArgs.addAll(usedArgs.skip(1))

    return helpArgs.last.getHelp(helpArgs)
  }

  public getAllHelp(
    Bool formatted = true
  ) -> CliArgHelp[] {
    let helpArgs = [binaryArg]
    helpArgs.addAll(usedArgs.skip(1))

    return helpArgs.last.getAllHelp(helpArgs)
  }

  override public toString() => args.filter({ _.enabled }).join(" ")
}